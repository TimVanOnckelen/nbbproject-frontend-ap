/* tslint:disable */
/* eslint-disable */
/**
 * NBB.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'box'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'city'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'countryCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'number'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'postalCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'street'?: string | null;
}
/**
 * 
 * @export
 * @interface Enterprise
 */
export interface Enterprise {
    /**
     * 
     * @type {string}
     * @memberof Enterprise
     */
    'enterpriseNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Enterprise
     */
    'enterpriseName'?: string | null;
    /**
     * 
     * @type {Address}
     * @memberof Enterprise
     */
    'address'?: Address;
    /**
     * 
     * @type {string}
     * @memberof Enterprise
     */
    'accountingDataURL'?: string | null;
    /**
     * 
     * @type {Array<FinancialData>}
     * @memberof Enterprise
     */
    'financialDataArray'?: Array<FinancialData> | null;
}
/**
 * 
 * @export
 * @interface FinancialData
 */
export interface FinancialData {
    /**
     * 
     * @type {number}
     * @memberof FinancialData
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof FinancialData
     */
    'year'?: number;
    /**
     * 
     * @type {number}
     * @memberof FinancialData
     */
    'revenue'?: number;
    /**
     * 
     * @type {number}
     * @memberof FinancialData
     */
    'profit'?: number;
}
/**
 * 
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProblemDetails
     */
    'status'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'detail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'instance'?: string | null;
}

/**
 * EnterpriseApi - axios parameter creator
 * @export
 */
export const EnterpriseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEnterpriseGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Enterprise`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} ondernemingsnummer 
         * @param {number} financialYear 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEnterpriseOndernemingsnummerFinancialYearGet: async (ondernemingsnummer: string, financialYear: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ondernemingsnummer' is not null or undefined
            assertParamExists('apiEnterpriseOndernemingsnummerFinancialYearGet', 'ondernemingsnummer', ondernemingsnummer)
            // verify required parameter 'financialYear' is not null or undefined
            assertParamExists('apiEnterpriseOndernemingsnummerFinancialYearGet', 'financialYear', financialYear)
            const localVarPath = `/api/Enterprise/{ondernemingsnummer}/{financialYear}`
                .replace(`{${"ondernemingsnummer"}}`, encodeURIComponent(String(ondernemingsnummer)))
                .replace(`{${"financialYear"}}`, encodeURIComponent(String(financialYear)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} ondernemingsnummer 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEnterpriseOndernemingsnummerGet: async (ondernemingsnummer: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ondernemingsnummer' is not null or undefined
            assertParamExists('apiEnterpriseOndernemingsnummerGet', 'ondernemingsnummer', ondernemingsnummer)
            const localVarPath = `/api/Enterprise/{ondernemingsnummer}`
                .replace(`{${"ondernemingsnummer"}}`, encodeURIComponent(String(ondernemingsnummer)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EnterpriseApi - functional programming interface
 * @export
 */
export const EnterpriseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EnterpriseApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEnterpriseGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Enterprise>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEnterpriseGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} ondernemingsnummer 
         * @param {number} financialYear 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEnterpriseOndernemingsnummerFinancialYearGet(ondernemingsnummer: string, financialYear: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FinancialData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEnterpriseOndernemingsnummerFinancialYearGet(ondernemingsnummer, financialYear, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} ondernemingsnummer 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEnterpriseOndernemingsnummerGet(ondernemingsnummer: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Enterprise>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEnterpriseOndernemingsnummerGet(ondernemingsnummer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EnterpriseApi - factory interface
 * @export
 */
export const EnterpriseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EnterpriseApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEnterpriseGet(options?: any): AxiosPromise<Array<Enterprise>> {
            return localVarFp.apiEnterpriseGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} ondernemingsnummer 
         * @param {number} financialYear 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEnterpriseOndernemingsnummerFinancialYearGet(ondernemingsnummer: string, financialYear: number, options?: any): AxiosPromise<FinancialData> {
            return localVarFp.apiEnterpriseOndernemingsnummerFinancialYearGet(ondernemingsnummer, financialYear, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} ondernemingsnummer 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEnterpriseOndernemingsnummerGet(ondernemingsnummer: string, options?: any): AxiosPromise<Enterprise> {
            return localVarFp.apiEnterpriseOndernemingsnummerGet(ondernemingsnummer, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EnterpriseApi - object-oriented interface
 * @export
 * @class EnterpriseApi
 * @extends {BaseAPI}
 */
export class EnterpriseApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public apiEnterpriseGet(options?: AxiosRequestConfig) {
        return EnterpriseApiFp(this.configuration).apiEnterpriseGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} ondernemingsnummer 
     * @param {number} financialYear 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public apiEnterpriseOndernemingsnummerFinancialYearGet(ondernemingsnummer: string, financialYear: number, options?: AxiosRequestConfig) {
        return EnterpriseApiFp(this.configuration).apiEnterpriseOndernemingsnummerFinancialYearGet(ondernemingsnummer, financialYear, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} ondernemingsnummer 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public apiEnterpriseOndernemingsnummerGet(ondernemingsnummer: string, options?: AxiosRequestConfig) {
        return EnterpriseApiFp(this.configuration).apiEnterpriseOndernemingsnummerGet(ondernemingsnummer, options).then((request) => request(this.axios, this.basePath));
    }
}


